//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0.3-b24-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2007.07.22 at 11:41:15 AM EST 
//


package tcav.plmxmlpdm.type.element;


import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.NamedNodeMap;
import tcav.plmxmlpdm.*;
import tcav.plmxmlpdm.classtype.UserValueDataType;
import tcav.plmxmlpdm.type.UserListDataType;
/*
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
*/

/**
 * 
 *       This element defines a single title/value pair in a UserData table.
 * 
 *       Attributes:
 * 
 *       title:          name of this entry in the table.
 *       value:          value of the entry.
 *       type:           datatype of the value, i.e. int, ints, etc, from UserValueDataType.
 *       format:         format string as used by printf.
 *       editable:       false if this value should not be modified by the receiving
 *                       application.
 *       dataRef:        If type is 'enum' or 'list', then a UserList element should be
 *                       specified either by dataRef, or by being included as a sub-element.
 *                       In the 'enum' case, the UserList gives the valid values of the
 *                       enum; in the 'list' case, 'value' is ignored and the UserList IS
 *                       the value of this entry in the table. 
 * 
 *       minInclusive:   Minimum value allowed (inclusive).
 *       minExclusive:   Minimum value allowed (exclusive).
 *       maxInclusive:   Maximum value allowed (inclusive).
 *       maxExclusive:   Maximum value allowed (exclusive).
 *       stepValue:      Allowed values go from min to max in steps of 'stepValue'.
 *       minLength:      Minimum list length allowed (only for type="list").
 *       maxLength:      Maximum list length allowed (ditto).
 * 
 *       Elements:
 * 
 *       UserList:       May contain a single UserList element (see dataRef above).
 *       
 * 
 * <p>Java class for UserDataElementType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="UserDataElementType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="UserList" type="{http://www.plmxml.org/Schemas/PLMXMLSchema}UserListDataType" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="dataRef" type="{http://www.plmxml.org/Schemas/PLMXMLSchema}anyURIType" />
 *       &lt;attribute name="editable" type="{http://www.w3.org/2001/XMLSchema}Boolean" default="false" />
 *       &lt;attribute name="format" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="maxExclusive" type="{http://www.w3.org/2001/XMLSchema}double" />
 *       &lt;attribute name="maxInclusive" type="{http://www.w3.org/2001/XMLSchema}double" />
 *       &lt;attribute name="maxLength" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" />
 *       &lt;attribute name="minExclusive" type="{http://www.w3.org/2001/XMLSchema}double" />
 *       &lt;attribute name="minInclusive" type="{http://www.w3.org/2001/XMLSchema}double" />
 *       &lt;attribute name="minLength" type="{http://www.w3.org/2001/XMLSchema}nonNegativeInteger" />
 *       &lt;attribute name="stepValue" type="{http://www.w3.org/2001/XMLSchema}double" />
 *       &lt;attribute name="title" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="type" type="{http://www.plmxml.org/Schemas/PLMXMLSchema}UserValueDataType" default="string" />
 *       &lt;attribute name="value" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 */
//@XmlAccessorType(XmlAccessType.FIELD)
/*
 @XmlType(name = "UserDataElementType", propOrder = {
    "userList"
})
 **/
public class UserDataElementType {

    //@XmlElement(name = "UserList")
    //NOTE:This needs to be checked for implementation
    protected UserListDataType userList;
    
    //@XmlAttribute
    protected final String dataRefAttribute = "dataRef";
    protected String dataRef;
    
    //@XmlAttribute
    protected final String editableAttribute = "editable";
    protected Boolean editable;
    
    //@XmlAttribute
    protected final String formatAttribute = "format";
    protected String format;
    
    //@XmlAttribute
    protected final String maxExclusiveAttribute = "maxExclusive";
    protected Double maxExclusive;
    
    //@XmlAttribute
    protected final String maxInclusiveAttribute = "maxInclusive";
    protected Double maxInclusive;
    
    //@XmlAttribute
    protected final String maxLengthAttribute = "maxLength";
    protected Integer maxLength;
    
    //@XmlAttribute
    protected final String minExclusiveAttribute = "minExclusive";
    protected Double minExclusive;
    
    //@XmlAttribute
    protected final String minInclusiveAttribute = "minInclusive";
    protected Double minInclusive;
    
    //@XmlAttribute
    protected final String minLengthAttribute = "minLength";
    protected Integer minLength;
    
    //@XmlAttribute
    protected final String stepValueAttribute = "stepValue";
    protected Double stepValue;
    
    //@XmlAttribute(required = true)
    protected final String titleAttribute = "title";
    protected String title;
    
    //@XmlAttribute
    protected final String typeAttribute = "type";
    protected UserValueDataType type;
    
    //@XmlAttribute(required = true)
    protected final String valueAttribute = "value";
    protected String value;
    
    
    public UserDataElementType(Node node) {
        Node currentNode = node;
        NamedNodeMap attrib = currentNode.getAttributes();
        NodeList nodeList = currentNode.getChildNodes();
        
        setDataRef(
                TagTools.getStringValue(attrib, dataRefAttribute));
        setEditable(
                Boolean.parseBoolean(
                TagTools.getStringValue(attrib, editableAttribute)));
        setFormat(
                TagTools.getStringValue(attrib, formatAttribute));
        setMaxExclusive(
                TagTools.getDoubleValue(attrib, maxExclusiveAttribute));
        setMaxInclusive(
                TagTools.getDoubleValue(attrib, maxInclusiveAttribute));
        setMaxLength(
                TagTools.getIntegerValue(attrib, maxLengthAttribute));
        setMinExclusive(
                TagTools.getDoubleValue(attrib, minExclusiveAttribute));
        setMinInclusive(
                TagTools.getDoubleValue(attrib, minInclusiveAttribute));
        setMinLength(
                TagTools.getIntegerValue(attrib, minLengthAttribute));
        setStepValue(
                TagTools.getDoubleValue(attrib, stepValueAttribute));
        setTitle(
                TagTools.getStringValue(attrib, titleAttribute));
        
        String s = TagTools.getStringValue(attrib, typeAttribute);
        if(s != null)
            setType(UserValueDataType.fromValue(s));
        setValue(
                TagTools.getStringValue(attrib, valueAttribute));

        TagTypeEnum tagType;
        for (int i=0; i<nodeList.getLength(); i++) {
            currentNode = nodeList.item(i);
            tagType = TagTypeEnum.fromValue(currentNode.getNodeName());
            
            switch(tagType) {
                case UserList:
                    setUserList(new UserListDataType(currentNode));
                default:
                    System.out.println("UserDataElementDataType: "+currentNode.getNodeName());
                    break;
            }
        }
    }

    /**
     * Gets the value of the userList property.
     * 
     * @return
     *     possible object is
     *     {@link UserListDataType }
     *     
     */
    public UserListDataType getUserList() {
        return userList;
    }

    /**
     * Sets the value of the userList property.
     * 
     * @param value
     *     allowed object is
     *     {@link UserListDataType }
     *     
     */
    public void setUserList(UserListDataType value) {
        this.userList = value;
    }

    /**
     * Gets the value of the dataRef property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDataRef() {
        return dataRef;
    }

    /**
     * Sets the value of the dataRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDataRef(String value) {
        this.dataRef = value;
    }

    /**
     * Gets the value of the editable property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isEditable() {
        if (editable == null) {
            return false;
        } else {
            return editable;
        }
    }

    /**
     * Sets the value of the editable property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setEditable(Boolean value) {
        this.editable = value;
    }

    /**
     * Gets the value of the format property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFormat() {
        return format;
    }

    /**
     * Sets the value of the format property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFormat(String value) {
        this.format = value;
    }

    /**
     * Gets the value of the maxExclusive property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getMaxExclusive() {
        return maxExclusive;
    }

    /**
     * Sets the value of the maxExclusive property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setMaxExclusive(Double value) {
        this.maxExclusive = value;
    }

    /**
     * Gets the value of the maxInclusive property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getMaxInclusive() {
        return maxInclusive;
    }

    /**
     * Sets the value of the maxInclusive property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setMaxInclusive(Double value) {
        this.maxInclusive = value;
    }

    /**
     * Gets the value of the maxLength property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public Integer getMaxLength() {
        return maxLength;
    }

    /**
     * Sets the value of the maxLength property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setMaxLength(Integer value) {
        this.maxLength = value;
    }

    /**
     * Gets the value of the minExclusive property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getMinExclusive() {
        return minExclusive;
    }

    /**
     * Sets the value of the minExclusive property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setMinExclusive(Double value) {
        this.minExclusive = value;
    }

    /**
     * Gets the value of the minInclusive property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getMinInclusive() {
        return minInclusive;
    }

    /**
     * Sets the value of the minInclusive property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setMinInclusive(Double value) {
        this.minInclusive = value;
    }

    /**
     * Gets the value of the minLength property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public Integer getMinLength() {
        return minLength;
    }

    /**
     * Sets the value of the minLength property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setMinLength(Integer value) {
        this.minLength = value;
    }

    /**
     * Gets the value of the stepValue property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getStepValue() {
        return stepValue;
    }

    /**
     * Sets the value of the stepValue property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setStepValue(Double value) {
        this.stepValue = value;
    }

    /**
     * Gets the value of the title property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTitle() {
        return title;
    }

    /**
     * Sets the value of the title property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTitle(String value) {
        this.title = value;
    }

    /**
     * Gets the value of the type property.
     * 
     * 
     * 
     * @return possible object is
     *     {@link UserValueDataType }
     */
    public UserValueDataType getType() {
        if (type == null) {
            return UserValueDataType.STRING;
        } else {
            return type;
        }
    }

    /**
     * Sets the value of the type property.
     * 
     * 
     * 
     * @param value
     *     allowed object is
     *     {@link UserValueDataType }
     */
    public void setType(UserValueDataType value) {
        this.type = value;
    }

    /**
     * Gets the value of the value property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getValue() {
        return value;
    }

    /**
     * Sets the value of the value property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setValue(String value) {
        this.value = value;
    }

}
