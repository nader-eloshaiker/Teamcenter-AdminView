//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0.3-b24-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2007.07.22 at 11:41:15 AM EST 
//


package tceav.manager.procedure.plmxmlpdm.base;

import java.util.ArrayList;
import java.util.List;

import tceav.manager.procedure.plmxmlpdm.type.element.ApplicationRefType;
import tceav.xml.TagTools;
import tceav.manager.procedure.plmxmlpdm.ProcedureTagTypeEnum;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.NamedNodeMap;

/*
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
*/

/**
 * 
 *       The DescriptionBase type is an abstract base type for PLM XML types which have
 *       optional description and ApplicationRef.
 *       
 *       Attributes:
 *       
 *       name:            descriptive or display name
 * 
 *       Sub-elements:
 * 
 *       Description      Readable textual description of the element.
 *       ApplicationRef   A means of uniquely identifying the element in terms understood by
 *                        the sending system. More than one is allowed (at most one per
 *                        Application).
 *       
 * 
 * <p>Java class for DescriptionBase complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DescriptionBase">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.plmxml.org/Schemas/PLMXMLSchema}IdBase">
 *       &lt;sequence>
 *         &lt;element name="Description" type="{http://www.plmxml.org/Schemas/PLMXMLSchema}DescriptionType" minOccurs="0"/>
 *         &lt;element name="ApplicationRef" type="{http://www.plmxml.org/Schemas/PLMXMLSchema}ApplicationRefType" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
//@XmlAccessorType(XmlAccessType.FIELD)
/*
  @XmlType(name = "DescriptionBase", propOrder = {
    "description",
    "applicationRef"
})
 */
public abstract class DescriptionBase extends IdBase {

    //@XmlElement(name = "Description")
    protected String description;
    
    //@XmlElement(name = "ApplicationRef")
    protected List<ApplicationRefType> applicationRef;
    
    //@XmlAttribute
    protected final String nameAttribute = "name";
    protected String name;
    
    public DescriptionBase(Node node) {
        super(node);
        
        if (node == null) {
            return;
        }

        Node currentNode = node;
        NamedNodeMap attrib = currentNode.getAttributes();
        NodeList nodeList = currentNode.getChildNodes();
        
        setName(TagTools.getStringValue(attrib, nameAttribute));
        
        ProcedureTagTypeEnum tagType;
        for (int i=0; i<nodeList.getLength(); i++) {
            currentNode = nodeList.item(i);
            tagType = ProcedureTagTypeEnum.fromValue(currentNode.getNodeName());
            
            switch(tagType) {
                case ApplicationRef:    // Set DescriptionBase Node
                    getApplicationRef().add(new ApplicationRefType(currentNode));
                    break;
                    
                case Description:
                    setDescription(currentNode.getNodeValue());
                    break;
                    
                default:
                    break;
            }
        }
    }

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public final void setDescription(String value) {
        this.description = value;
    }

    /**
     * Gets the value of the applicationRef property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the applicationRef property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getApplicationRef().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ApplicationRefType }
     * 
     * 
     * @return 
     */
    public final List<ApplicationRefType> getApplicationRef() {
        if (applicationRef == null) {
            applicationRef = new ArrayList<>();
        }
        return this.applicationRef;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public final void setName(String value) {
        this.name = value;
    }
    
}
